// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// schema.prisma
// enums.prisma

// Enum for goal
enum Goal {
  GAIN_MASS
  LOSE_FAT
  MAINTENANCE
}

// Enum for gender
enum Gender {
  F
  M
}

// Definition of the tbusuario model
model User {
  id                    String     @id @default(uuid())
  name                  String?
  email                 String
  password              String?
  info                  UserInfo?
   stripe_custumer_id String?
  subscription Subscription?
  sessions_week TrainWeek[]
  fedds FeedBack[]
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}
enum Phase {
 BASE
 CHOQUE
 DELOAD
}
enum MuscleGroup {
  PEITO
  COSTAS
  OMBROS
  BICEPS
  TRICEPS
  POSTERIOR
  GLUTEO
  QUADRICEPS
  ABDOMEN
}
model UserInfo {
  id                    String     @id @default(uuid())
  weight                Float?
  height                Float?
  body_fat_percentage   Float?
  goal                  Goal
  muscle_group_target   Json
  gender                Gender
  age                   Int?
  activity_level        Float?
  training_frequency    Int?
  level                String?
  userId               String    @unique
  // Definition of the relationship with user
  user      User @relation(fields: [userId], references: [id])
  isFinished Boolean
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model Subscription{
    id String @id @default(uuid())
  status String
  priceId String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  @@map("subscriptions")  

  userId String @unique
  user User @relation(fields: [userId], references: [id])
}

model TrainWeek {
  id          String       @id @default(uuid())
  userId      String       // Relacionamento com o usuário
  user        User         @relation(fields: [userId], references: [id])
  protocolId String
   protocol     Protocol    @relation(fields: [protocolId], references: [id])
  sessions    TrainSession[] // Relacionamento com as sessões de treino
}

// models/TrainSession.model.prisma

model TrainSession {
  id            String       @id @default(uuid())
  trainWeekId   String       // Relacionamento com a semana de treino
  trainWeek     TrainWeek    @relation(fields: [trainWeekId], references: [id])

  exercicios    Exercicio[]  // Relacionamento com os exercícios da sessão
}

model FeedBack{
  id String @id @default(uuid())
  userId               String    @unique
  user      User @relation(fields: [userId], references: [id])
}

model Muscle {
  id      String   @id @default(uuid())
  name    MuscleGroup
  exercises Exercicio_Muscle[]

}
model Protocol{
  id String @id @default(uuid())
  duration Int @default(12)
  trainweeks TrainWeek[]
  phase Phase

}

model Exercicio_Muscle{
  id String @id @default(uuid())
  muscleGroupId String  
  exercicioId String    // Relacionamento com o grupo muscular
  muscleGroup   Muscle  @relation(fields: [muscleGroupId], references: [id])
  exercicio Exercicio @relation(fields: [exercicioId], references: [id])
}

model Exercicio {
  id            String       @id @default(uuid())
  trainSessionId String     // Relacionamento com a sessão de treino
  trainSession TrainSession @relation(fields: [trainSessionId], references: [id])

  name          String
  sets          Set[]        // Relacionamento com os sets do exercício
  rest          Int
  obs           String
 exercises Exercicio_Muscle[]
  
}

// models/Set.model.prisma

model Set {
  id          String       @id @default(uuid())
  exercicioId String       // Relacionamento com o exercício
  exercicio   Exercicio    @relation(fields: [exercicioId], references: [id])

  reps        String
  carga       Int
}