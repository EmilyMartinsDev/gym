// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// schema.prisma
// enums.prisma

// Enum for goal
enum Goal {
  GAIN_MASS
  LOSE_FAT
  MAINTENANCE
}

// Enum for gender
enum Gender {
  F
  M
}

// Definition of the tbusuario model
model User {
  id                    String     @id @default(uuid())
  name                  String?
  email                 String
  password              String?
  info                  UserInfo?
   stripe_custumer_id String?
  subscription Subscription?
   workouts WorkoutUser[]
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  
  @@map("users") 
}
enum Phase {
 BASE
 CHOQUE
 DELOAD
}

enum Level {
 BEGINNER
 INTERMEDIATED
 ADVANCED
ATHLETE
}

enum frequency {
  ONE
  TWO
  THREE
  FOUR
  FIVE
  SIX
}

enum MuscleGroup {
  PEITO
  COSTAS
  OMBROS
  BICEPS
  TRICEPS
  POSTERIOR
  GLUTEO
  QUADRICEPS
  ABDOMEN
}
model UserInfo {
  id                    String     @id @default(uuid())
  weight                Float?
  height                Float?
  body_fat_percentage   Float?
  goal                  Goal?
  gender                Gender?
  age                   Int?
  activity_level        Float?
  muscle_target         MuscleGroup?
  frequency frequency?
  level                Level?
  userId               String    @unique
  // Definition of the relationship with user
  user      User @relation(fields: [userId], references: [id])
  isFinished Boolean
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  
  @@map("usersinfos") 
}

model Subscription{
    id String @id @default(uuid())
  status String
  priceId String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  @@map("subscriptions")  

  userId String @unique
  user User @relation(fields: [userId], references: [id])
}

model WorkoutUser{
  id String @default(uuid()) @id
  userId String
  workouId String
   user User @relation(fields: [userId], references: [id])
  workout Workout @relation(fields: [workouId], references: [id])

  @@map("workoutsuser") 
}

model Workout{
  name String?
  id String @default(uuid()) @id
  workout_level Level
  frequency  frequency
  fase Phase
  muscle_target MuscleGroup
 workouts WorkoutUser[]
  micros Microcycle[]
   created_at DateTime @default(now())
  updated_at DateTime @default(now())
  @@map("workouts") 
}

model Muscle {
  id      String   @id @default(uuid())
  name    MuscleGroup
  exercises Exercicio_Muscle[]
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  @@map("muscles") 
}

model Session_Exercise{
 id      String   @id @default(uuid())
  sets          Set[]  
 sessionId String
 exercicioId String
  rest          Int
  obs           String
 session Session @relation(fields: [sessionId], references: [id])
 exercises Exercicio @relation(fields: [exercicioId], references: [id])
 @@map("sessions_exercises")
}

model Exercicio_Muscle{
  id String @id @default(uuid())
  muscleGroupId String  
  exercicioId String    // Relacionamento com o grupo muscular
  muscleGroup   Muscle  @relation(fields: [muscleGroupId], references: [id])
  exercicio Exercicio @relation(fields: [exercicioId], references: [id])
    created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model Exercicio {
  id            String       @id @default(uuid())
 exercises_session Session_Exercise[]
  name          String
       // Relacionamento com os sets do exercíci
 exercises Exercicio_Muscle[]
    created_at DateTime @default(now())
  updated_at DateTime @default(now())
  @@map("exercicses") 
}

model Microcycle{
 id            String       @id @default(uuid())
 sessions Session[]
 workoutId String
   wokout Workout  @relation(fields: [workoutId], references: [id])
}
// models/Set.model.prisma
model Session{
  id      String   @id @default(uuid())
  exercises_session Session_Exercise[]
  microcicleId String
    micro Microcycle  @relation(fields: [microcicleId], references: [id])
}
model Set {
  id          String       @id @default(uuid())
  exercicioId String       // Relacionamento com o exercício
  exercicio   Session_Exercise    @relation(fields: [exercicioId], references: [id])

  reps        String
  carga       Int
    created_at DateTime @default(now())
  updated_at DateTime @default(now())
    @@map("sets") 
}